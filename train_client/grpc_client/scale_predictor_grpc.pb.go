// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: scale_predictor.proto

package grpc_client

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ScalePredictor_Predict_FullMethodName     = "/scale_predictor.ScalePredictor/Predict"
	ScalePredictor_Train_FullMethodName       = "/scale_predictor.ScalePredictor/Train"
	ScalePredictor_TrainByFile_FullMethodName = "/scale_predictor.ScalePredictor/TrainByFile"
)

// ScalePredictorClient is the client API for ScalePredictor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// RPC Services
type ScalePredictorClient interface {
	Predict(ctx context.Context, in *PredictRequest, opts ...grpc.CallOption) (*PredictResponse, error)
	Train(ctx context.Context, in *TrainRequest, opts ...grpc.CallOption) (*TrainResponse, error)
	TrainByFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[FileChunk, TrainStatus], error)
}

type scalePredictorClient struct {
	cc grpc.ClientConnInterface
}

func NewScalePredictorClient(cc grpc.ClientConnInterface) ScalePredictorClient {
	return &scalePredictorClient{cc}
}

func (c *scalePredictorClient) Predict(ctx context.Context, in *PredictRequest, opts ...grpc.CallOption) (*PredictResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PredictResponse)
	err := c.cc.Invoke(ctx, ScalePredictor_Predict_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scalePredictorClient) Train(ctx context.Context, in *TrainRequest, opts ...grpc.CallOption) (*TrainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TrainResponse)
	err := c.cc.Invoke(ctx, ScalePredictor_Train_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scalePredictorClient) TrainByFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[FileChunk, TrainStatus], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ScalePredictor_ServiceDesc.Streams[0], ScalePredictor_TrainByFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FileChunk, TrainStatus]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ScalePredictor_TrainByFileClient = grpc.ClientStreamingClient[FileChunk, TrainStatus]

// ScalePredictorServer is the server API for ScalePredictor service.
// All implementations must embed UnimplementedScalePredictorServer
// for forward compatibility.
//
// RPC Services
type ScalePredictorServer interface {
	Predict(context.Context, *PredictRequest) (*PredictResponse, error)
	Train(context.Context, *TrainRequest) (*TrainResponse, error)
	TrainByFile(grpc.ClientStreamingServer[FileChunk, TrainStatus]) error
	mustEmbedUnimplementedScalePredictorServer()
}

// UnimplementedScalePredictorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedScalePredictorServer struct{}

func (UnimplementedScalePredictorServer) Predict(context.Context, *PredictRequest) (*PredictResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Predict not implemented")
}
func (UnimplementedScalePredictorServer) Train(context.Context, *TrainRequest) (*TrainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Train not implemented")
}
func (UnimplementedScalePredictorServer) TrainByFile(grpc.ClientStreamingServer[FileChunk, TrainStatus]) error {
	return status.Errorf(codes.Unimplemented, "method TrainByFile not implemented")
}
func (UnimplementedScalePredictorServer) mustEmbedUnimplementedScalePredictorServer() {}
func (UnimplementedScalePredictorServer) testEmbeddedByValue()                        {}

// UnsafeScalePredictorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScalePredictorServer will
// result in compilation errors.
type UnsafeScalePredictorServer interface {
	mustEmbedUnimplementedScalePredictorServer()
}

func RegisterScalePredictorServer(s grpc.ServiceRegistrar, srv ScalePredictorServer) {
	// If the following call pancis, it indicates UnimplementedScalePredictorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ScalePredictor_ServiceDesc, srv)
}

func _ScalePredictor_Predict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PredictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScalePredictorServer).Predict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScalePredictor_Predict_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScalePredictorServer).Predict(ctx, req.(*PredictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScalePredictor_Train_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScalePredictorServer).Train(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScalePredictor_Train_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScalePredictorServer).Train(ctx, req.(*TrainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScalePredictor_TrainByFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ScalePredictorServer).TrainByFile(&grpc.GenericServerStream[FileChunk, TrainStatus]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ScalePredictor_TrainByFileServer = grpc.ClientStreamingServer[FileChunk, TrainStatus]

// ScalePredictor_ServiceDesc is the grpc.ServiceDesc for ScalePredictor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScalePredictor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scale_predictor.ScalePredictor",
	HandlerType: (*ScalePredictorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Predict",
			Handler:    _ScalePredictor_Predict_Handler,
		},
		{
			MethodName: "Train",
			Handler:    _ScalePredictor_Train_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TrainByFile",
			Handler:       _ScalePredictor_TrainByFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "scale_predictor.proto",
}
